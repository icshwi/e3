# ; -*- mode: sh;-*-
#  Copyright (c) 2018 - 2019  Jeong Han Lee
#
#  The program is free software: you can redistribute
#  it and/or modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation, either version 2 of the
#  License, or any newer version.
#
#  This program is distributed in the hope that it will be useful, but WITHOUT
#  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
#  more details.
#
#  You should have received a copy of the GNU General Public License along with
#  this program. If not, see https://www.gnu.org/licenses/gpl-2.0.txt
#
#
#   author  : Jeong Han Lee
#   email   : jeonghan.lee@gmail.com
#   date    : Thursday, September 26 10:42:09 CEST 2019
#   version : 0.0.7

EXIST=1
NON_EXIST=0

SUDO="sudo"

function pushd { builtin pushd "$@" > /dev/null; }
function popd  { builtin popd  "$@" > /dev/null; }


function die
{
    error=${1:-1}
    ## exits with 1 if error number not given
    shift
    [ -n "$*" ] &&
	printf "%s%s: %s\n" "$scriptname" ${version:+" ($version)"} "$*" >&2
    exit "$error"
}


## if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
##    EXIST
## fi
##

function checkIfDir
{
    
    local dir=$1
    local result=""
    if [ ! -d "$dir" ]; then
	result=$NON_EXIST
	# doesn't exist
    else
	result=$EXIST
	# exist
    fi
    echo "${result}"
};


## if [[ $(checkIfFile "${release_file}") -eq "$NON_EXIST" ]]; then
#   NON_EXIT
## fi

function checkIfFile
{
    local file=$1
    local result=""
    if [ ! -e "$file" ]; then
	result=$NON_EXIST
	# doesn't exist
    else
	result=$EXIST
	# exist
    fi
    echo "${result}"	 
};


function checkIfVar()
{

    local var=$1
    local result=""
    if [ -z "$var" ]; then
	result=$NON_EXIST
	# doesn't exist
    else
	result=$EXIST
	# exist
    fi
    echo "${result}"
}


# Usage :
# e3_version="$(read_file_get_string  "${file_name}" "E3_VERSION:=")";
# It ignores the # character
# 
function read_file_get_string
{
    local FILENAME=$1
    local PREFIX=$2

    local val=""
    while IFS= read -r line; do
	if [ "$line" ]; then
	    [[ "$line" =~ ^#.*$ ]] && continue
	    if [[ $line =~ "${PREFIX}" ]] ; then
	     	val=${line#$PREFIX}
	    fi
	fi
    done < ${FILENAME}

    echo "$val"
}




# this function has some issue to print array, beaware it.

# function print_list
# {
#     local array=$1; shift;
#     for a_list in ${array[@]}; do
# 	printf " %s\n" "$a_list";
#     done
# }


function print_module_list
{
    echo ">> Vertical display for the selected modules :"
    echo ""
    print_list
#    print_vendor_list
    echo ""
}



function print_list
{
    local a_list;
    local i;
    let i=0;
    printf " Modules List \n";
    for a_list in ${module_list[@]}; do
	printf "  %3d : %s\n" "$i" "$a_list";
	((++i))
    done
    
}

# function print_vendor_list
# {
#     local a_list;
#     local i;
#     let i=0;
#     printf "\n Vendor Modules List \n";
#     for a_list in ${vendor_list[@]}; do
# 	printf "  %3d : %s\n" "$i" "$a_list";
# 	((++i))
#     done
    
# }



function git_clone
{

    local rep_name=$1 ; shift;
    printf ">> %s\n" "$rep_name";
    if [[ $(checkIfDir "${rep_name}") -eq "$NON_EXIST" ]]; then
	printf ">> No target directroy is found, Cloning...\n\n";
	${GIT_CMD} ${GIT_URL}/$rep_name  ||  die 1 "${FUNCNAME[*]} : Cloning Error at ${rep}: Please check the repository status" ;
    else
	printf ">> Target directory is found, Pulling instead of Cloning ... \n\n";
	pushd ${rep_name} 
	git pull ||  die 1 "${FUNCNAME[*]} : Pulling Error at ${rep}: Please check the repository status" ;
	popd
    fi
    printf "\n";
    
}



function git_clone_base
{

    local rep_name=$1 ; shift;
    printf ">> %s\n" "$rep_name";
    if [[ $(checkIfDir "${rep_name}") -eq "$NON_EXIST" ]]; then
	printf ">> No target directroy is found, Cloning...\n\n";
	${GIT_CMD} ${GIT_URL}/$rep_name  ||  die 1 "${FUNCNAME[*]} : Cloning Error at ${rep}: Please check the repository status" ;
    else
	printf ">> Target directory is found, Pulling instead of Cloning ... \n\n";
	pushd ${rep_name} 
	git pull ||  die 1 "${FUNCNAME[*]} : Pulling Error at ${rep}: Please check the repository status" ;
	popd
    fi
    printf "\n";
    
}


    
function get_module_list
{
    local empty_string="";
    declare -a entry=();
 
    while IFS= read -r line_data; do
	if [ "$line_data" ]; then
	    # Skip command #
	    [[ "$line_data" =~ ^#.*$ ]] && continue
	    entry[i]="${line_data}"
	    ((++i))
	fi
    done < $1
 
    echo ${entry[@]}
}




function git_commit
{
    local rep="";
    local git_commit_comment=$1; shift;
    local i;
    let i=0;
    for rep in  ${module_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    pushd ${rep}
	    printf "\n>> $i : %s : %s %s \n" "${rep}" "${FUNCNAME[*]}" "${git_commit_comment}" 
	    git commit -m "${git_commit_comment}"
	    popd
	    
	else
	    printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
	fi
	((++i))
    done
}


function git_push
{
    local rep="";
    local i;
    let i=0;
    for rep in  ${module_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    pushd ${rep}
	    printf "\n>> $i : %s : %s \n" "${rep}" "${FUNCNAME[*]}" 
	    git push
	    popd
	else
	    printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
	fi
	((++i))
    done
    
    
}


function git_status
{
    local rep="";
    local i;
    let i=0;
    for rep in  ${module_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    pushd ${rep}
	    printf "\n>> $i : %s : %s \n" "${rep}" "${FUNCNAME[*]}" 
	    git status
	    popd
	else
	    printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
	fi
	((++i))
    done
    
    
}


function git_add
{
    local rep="";
    local git_add_file=$1; shift;
    local i;
    let i=0;
    for rep in  ${module_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    pushd ${rep}
	    printf "\n>> $i : %s : %s %s \n" "${rep}" "${FUNCNAME[*]}" "${git_add_file}" 
	    git add ${git_add_file}
	    popd
	else
	    printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
	fi
	((++i))
    done
}

function git_rm
{
    local rep="";
    local git_rm_file=$1; shift;
    local i;
    let i=0;
    for rep in  ${module_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    pushd ${rep}
	    printf "\n>> $i : %s : %s %s \n" "${rep}" "${FUNCNAME[*]}" "${git_rm_file}" 
	    git rm ${git_rm_file}
	    popd
	else
	    printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
	fi
	((++i))
    done
}






function git_diff
{
    local rep="";
    local git_diff_file=$1; shift;
    local i;
    let i=0;
    for rep in  ${module_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    pushd ${rep}
	    printf "\n>> $i : %s : %s %s \n" "${rep}" "${FUNCNAME[*]}" "${git_diff_file}" 
	    git diff ${git_diff_file}
	    popd
	else
	    printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
	fi
	((++i))
    done
}


# Hard code... one should enable it
# Delete the lines starting from the 'line_string' till the last line:
function delete_lines_starting_from
{
    local rep="";
    local git_diff_file=$1; shift;
    local i;
    let i=0;
    for rep in  ${module_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    pushd ${rep}
	    printf "\n>> $i : %s : %s %s \n" "${rep}" "${FUNCNAME[*]}" "${git_diff_file}" 
	    sed -i '/# Create symbolic/,$d' ${git_diff_file}
	    popd
	else
	    printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
	fi
	((++i))
    done
}

function insert_a_string_to_after_a_specific_string
{
    local rep="";
    local a_file=$1; shift;
    local specific_string=$1; shift;
    local insert_string=$1; shift;


    
    local i;
    let i=0;
    for rep in  ${module_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    pushd ${rep}
	    printf "\n>> $i : %s : %s %s %s %s \n" "${rep}" "${FUNCNAME[*]}" "${a_file}" "$specific_string" "$insert_string"
	    sed -i "/${specific_string}/a  $insert_string" ${a_file} 
	    popd
	else
	    printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
	fi
	((++i))
    done
}

function git_checkout
{
    local rep="";
    local git_checkout_file=$1; shift;
    local i;
    let i=0;
    for rep in  ${module_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    pushd ${rep}
	    printf "\n>> $i : %s : %s %s \n" "${rep}" "${FUNCNAME[*]}" "${git_checkout_file}" 
	    git checkout -- ${git_checkout_file}
	    popd
	else
	    printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
	fi
	((++i))
    done
}


# This function is very dangeous, please don't use this 
function git_merge_ours_donot_use
{
    local rep="";
    local merge_target=$1; shift;
    local i;
    let i=0;
    for rep in  ${module_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    pushd ${rep}
	    printf "\n>> $i : %s : %s %s \n" "${rep}" "${FUNCNAME[*]}" "${merge_target}"
	    git checkout target_path_test
	    git merge -s ours master
	    git checkout master
	    git merge target_path_test
	    popd
	else
	    printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
	fi
	((++i))
    done
}






function git_pull_modules
{
    local rep="";
    local i;
    let i=0;
    for rep in  ${module_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    pushd ${rep}
	    printf "\n>> $i : %s : %s \n" "${rep}" "${FUNCNAME[*]}" 
	    git pull
	    popd
	else
	    printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
	fi
	((++i))
    done
}


function git_pull_vendor_modules
{
    local rep="";
    local i;
    let i=0;
    for rep in  ${vendor_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    pushd ${rep}
	    printf "\n>> $i : %s : %s \n" "${rep}" "${FUNCNAME[*]}" 
	    git pull
	    popd
	else
	    printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
	fi
	((++i))
    done
}



function git_pull_all
{
    local rep="";

    for rep in  ${base_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    pushd ${rep}
	    git pull
	    popd
	fi
    done

    rep="";
    for rep in  ${require_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    pushd ${rep}
	    git pull
	    popd
	fi
    done

    git_pull_vendor_modules
    git_pull_modules
}




function print_version_info_base
{
    local rep="";
    local conf_mod="configure/CONFIG_BASE";
    local epics_base_tag=""
    local e3_base_version="";
    local e3_base_path="";
    local epics_base="";
    #    local base_prefix="R";
    # Since R0.1, we don't need to check e3-env, because we drop it forever.
    # if [[ $(checkIfFile "${conf_mod}") -eq "$NON_EXIST" ]]; then
    # 	conf_mod="e3-env/e3-env";
    # else
    # 	conf_mod="configure/CONFIG_BASE";
    # fi	

    for rep in  ${base_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    pushd ${rep}
	    if [[ $(checkIfFile "${conf_mod}") -eq "$EXIST" ]]; then
		epics_base_tag="$(read_file_get_string   "${conf_mod}" "EPICS_BASE_TAG:=")"
		e3_base_version="$(read_file_get_string  "${conf_mod}" "E3_BASE_VERSION:=")"
		e3_base_path="$(read_file_get_string     "${conf_mod}" "E3_EPICS_PATH:=")"
		epics_base="${e3_base_path}/base-${e3_base_version}";
	    fi	    					    
	    printf "\n"
	    printf ">> %s\n" "${rep}"
	    printf "   EPICS_BASE      : %s\n" "${epics_base}"
	    printf "   EPICS_BASE_TAG  : %s\n" "${epics_base_tag}"
	    printf "   E3_BASE_VERSION : %s\n" "${e3_base_version}"
	    branch_info=$(git rev-parse --abbrev-ref HEAD);
	    printf "   E3 Branch       : %s\n" "${branch_info}"
	    tag_info=$(git tag --points-at HEAD)
	    printf "   E3 Tag          : %s\n" "${tag_info}"
	    popd
	fi
    done
}




function print_version_info_require
{
    local rep="";
    local conf_mod="configure/CONFIG_MODULE";
    local epics_module_tag=""
    local e3_version="";
    local release_info="configure/RELEASE";
    local e3_base_path="";
    # Since R0.1, we don't need to check e3-env, because we drop it forever.
    #
    # if [[ $(checkIfFile "${conf_mod}") -eq "$NON_EXIST" ]]; then
    # 	conf_mod="e3-env/e3-env";
    # else
    # 	conf_mod="configure/CONFIG_MODULE";
    # fi	

    for rep in  ${require_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    pushd ${rep}
	    if [[ $(checkIfFile "${conf_mod}") -eq "$EXIST" ]]; then
		epics_module_tag="$(read_file_get_string   "${conf_mod}" "EPICS_MODULE_TAG:=")"
		e3_version="$(read_file_get_string         "${conf_mod}" "E3_MODULE_VERSION:=")"
	    fi
	    if [[ $(checkIfFile "configure/RELEASE") -eq "$EXIST" ]]; then
		e3_base_path="$(read_file_get_string       "${release_info}" "EPICS_BASE=")"
	    fi
	    printf "\n"
	    printf ">> %s\n" "${rep}"
	    printf "   EPICS_BASE        : %s\n" "${e3_base_path}"
	    printf "   EPICS_MODULE_TAG  : %s\n" "${epics_module_tag}"
	    printf "   E3_MODULE_VERSION : %s\n" "${e3_version}"
	    branch_info=$(git rev-parse --abbrev-ref HEAD);
	    printf "   E3 Branch         : %s\n" "${branch_info}"
	    tag_info=$(git tag --points-at HEAD)
	    printf "   E3 Tag            : %s\n" "${tag_info}"
	    popd
	fi
    done
}


function print_installed_modules
{
    local rep="";
    local search_mod="";
    local mods_list="";
    local mods_none=" -No installed module versions found. "

    # Walk the module list and query the E3 SiteMods installation directories for installed versions of each module
    for rep in  ${module_list[@]}; do
        search_mod=${rep#"e3-"}
        echo "$search_mod"
        if [ -d $E3_SITEMODS_PATH/$search_mod ]; then
            mods_list=$(ls $E3_SITEMODS_PATH/$search_mod)
            if [ ${#mods_list} -eq 0 ]; then
                echo "$mods_none"
            else
                echo "$mods_list"
            fi
        else
            echo "$mods_none"
        fi
    done    

}


function print_version_info_modules
{
    local rep="";
    local conf_mod="configure/CONFIG_MODULE";
    local epics_module_tag=""
    local e3_version=""
    local e3_version="";
    local release_info="configure/RELEASE";
    local e3_base_path="";
    local e3_require_version="";
    local e3_require_name="";
    
    # if [[ $(checkIfFile "${conf_mod}") -eq "$NON_EXIST" ]]; then
    # 	conf_mod="configure/CONFIG";
    # else
    # 	conf_mod="configure/CONFIG_MODULE";
    # fi	

    for rep in  ${module_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    pushd ${rep}
	    if [[ $(checkIfFile "configure/CONFIG_MODULE") -eq "$EXIST" ]]; then
		epics_module_tag="$(read_file_get_string   "${conf_mod}" "EPICS_MODULE_TAG:=")"
		e3_version="$(read_file_get_string         "${conf_mod}" "E3_MODULE_VERSION:=")"
	    fi
	    if [[ $(checkIfFile "configure/RELEASE") -eq "$EXIST" ]]; then
		e3_base_path="$(read_file_get_string       "${release_info}" "EPICS_BASE=")"
		e3_require_version="$(read_file_get_string "${release_info}" "E3_REQUIRE_NAME:=")"
		e3_require_name="$(read_file_get_string    "${release_info}" "E3_REQUIRE_VERSION:=")"
		
	    fi	    					    
	    printf "\n"
	    printf ">> %s\n" "${rep}"
	    printf "   EPICS_BASE         : %s\n" "${e3_base_path}"
	    printf "   E3_REQUIRE_NAME    : %s\n" "${e3_require_version}"
	    printf "   E3_REQUIRE_VERSION : %s\n" "${e3_require_name}"
	    printf "   EPICS_MODULE_TAG   : %s\n" "${epics_module_tag}"
	    printf "   E3_MODULE_VERSION  : %s\n" "${e3_version}"
	    branch_info=$(git rev-parse --abbrev-ref HEAD);
	    printf "   E3 Branch          : %s\n" "${branch_info}"
	    tag_info=$(git tag --points-at HEAD)
	    printf "   E3 Tag             : %s\n" "${tag_info}"
	    popd
	fi
    done
}


function print_version_info_all
{
    print_version_info_base;
    print_version_info_require;
    print_version_info_modules;
}

function print_version_info_e3
{
    local rep=${SC_TOP};
    if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	pushd ${rep}
	printf ">> %s\n" "${rep}"
	branch_info=$(git rev-parse --abbrev-ref HEAD);
	printf "   E3 Branch         : %s\n" "${branch_info}"
	tag_info=$(git tag --points-at HEAD)
	printf "   E3 Tag            : %s\n" "${tag_info}"
	printf "   E3 Release        : \n";
	tree -L 2 release_*
	popd
    fi
}




function print_version_really_everything
{
    local rep="";
    local git_commit_comment=$1; shift;
    for rep in  ${module_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    pushd ${rep}
	    make vars
	    popd
	else
	    printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
	fi
    done
}



function exec_makefile_rule
{
    local rep="";
    local options=$1; shift;
    for rep in  ${module_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    printf "<<<<< ---- %20s: %6s ---- <<<<<<\n" "$rep" "${options}";
	    make --no-print-directory -s -C ${rep} ${options}
	    printf ">>>>> ---- %20s: %6s ---- >>>>>>\n\n" "$rep" "${options}";
	else
	    printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
	fi
    done
}


function cat_file
{
    local rep="";
    local cat_a_file=$1; shift;
    local i;
    let i=0;
    for rep in  ${module_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    pushd ${rep}
	    printf "\n>> $i : %s : %s %s \n" "${rep}" "${FUNCNAME[*]}" "${cat_a_file}" 
	    cat -bns ${cat_a_file}
	    popd
	else
	    printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
	fi
	((++i))
    done
}


# This function shoudl be called when "Target" exists
# 
function check_sudo_permission_needed
{
    local rep="";
    local return="";
    # we have one base,
    # return 1 : SUDO is needed
    # return 0 : SUDO is not needed
    # return 2 : No base
    for rep in  ${base_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    return=$(make -C ${SC_TOP}/${rep} vars |grep ^SUDO_INFO | cut -f 3 -d ' ')
	else
	    return="2"
	fi
    done

    if [ "$return" == "1" ]; then
	echo "sudo"
    elif [ "$return" == "0" ]; then
	echo ""
    else
	die 1 "${FUNCNAME[*]} : gcheck_sudo_permission_needed: you should not see this. If so, it was used in the wrong place. Please check it" ;
    fi 

    
}


# BASE
function clone_base
{
    local rep="";
    for rep in  ${base_list[@]}; do
	git_clone_base ${rep} ||  die 1 "${FUNCNAME[*]} : git clone ERROR at ${rep}: the target ${rep} may be exist, Please check it" ;
    done
}


# BASE
function clean_base
{
    
    local rep="";
    local sudo_cmd="";
    for rep in  ${base_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    sudo_cmd=$(check_sudo_permission_needed)
	    echo "Cleaning .... $rep"
	    set -x;
	    ${sudo_cmd} rm -rf ${SC_TOP}/${rep} ||  die 1 "${FUNCNAME[*]} : one needs the sudo permission to do this. Pleases sudo rm -rf ${SC_TOP}/${rep}" ;
	    set +x;
	else
	    printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
	fi
    done
}


# BASE
function git_checkout_base
{
  
    local checkout_target=$1; shift;

    if [[ $(checkIfVar "${checkout_target}") -eq "$EXIST" ]]; then
	local rep="";
	for rep in  ${base_list[@]}; do
	    if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
		pushd ${rep}
		git checkout ${checkout_target}
		popd
	    else
		printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
	    fi  
	done
    else
	printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
    fi
        
}




## REQUIRE
function clone_require
{
    local rep="";
    for rep in  ${require_list[@]}; do
	git_clone ${rep}  ||  die 1 "${FUNCNAME[*]} : git clone ERROR at ${rep}: the target ${rep} may be exist, Please check it" ;
    done
}


## REQUIRE
function clean_require
{
    local rep="";
    local sudo_cmd="";
    for rep in  ${require_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    sudo_cmd=$(check_sudo_permission_needed)
	    pushd ${rep}
	    make uninstall ;
	    popd
	    set -x;
	    ${sudo_cmd} rm -rf ${SC_TOP}/${rep} ||  die 1 "${FUNCNAME[*]} : one needs the sudo permission to do this. Pleases sudo rm -rf ${SC_TOP}/${rep}" ;
	    set +x;
	else
	    printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}";
	fi
    done
}


## REQUIRE
function git_checkout_require
{
    
    local checkout_target=$1; shift;
    if [[ $(checkIfVar "${checkout_target}") -eq "$EXIST" ]]; then
	local rep="";
	for rep in  ${require_list[@]}; do
	    if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
		pushd ${rep}
		git checkout ${checkout_target}
		popd
	    else
		printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
	    fi  
	done
    else
	printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
    fi  
}


## VENDOR MODULES
function clone_vendor_modules
{
    local rep="";
    for rep in  ${vendor_list[@]}; do
	git_clone ${rep}  ||  die 1 "${FUNCNAME[*]} : git clone ERROR at ${rep}: the target ${rep} may be exist, Please check it" ;
    done
}


## VENDOR MODULES
function git_checkout_vendor_modules
{
    
    local checkout_target=$1; shift;
    if [[ $(checkIfVar "${checkout_target}") -eq "$EXIST" ]]; then
	local rep="";
	for rep in  ${vendor_list[@]}; do
	    if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
		pushd ${rep}
		git checkout ${checkout_target}
		popd
	    else
		printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
	    fi  
	done
    else
	printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
    fi  
}



function clean_vendor_modules
{
    
    local rep="";
    local sudo_cmd="";
    for rep in  ${module_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    sudo_cmd=$(check_sudo_permission_needed)
	    echo "Cleaning .... ${sudo_cmd} $rep"
	    pushd ${rep}
	    make uninstall 
	    popd
	    set -x;
	    ${sudo_cmd} rm -rf ${SC_TOP}/${rep} ||  die 1 "${FUNCNAME[*]} : one needs the sudo permission to do this. Pleases sudo rm -rf ${SC_TOP}/${rep}" ;
	    set +x;
	else
	    printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
	fi
	printf "\n";
    done
}




## MODULES
function clone_modules
{
    local rep="";
    for rep in  ${module_list[@]}; do
	git_clone ${rep}  ||  die 1 "${FUNCNAME[*]} : git clone ERROR at ${rep}: the target ${rep} may be exist, Please check it" ;
    done
}

## MODULES
function git_checkout_modules
{
    
    local checkout_target=$1; shift;
    if [[ $(checkIfVar "${checkout_target}") -eq "$EXIST" ]]; then
	local rep="";
	for rep in  ${module_list[@]}; do
	    if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
		pushd ${rep}
		git checkout ${checkout_target}
		popd
	    else
		printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
	    fi  
	done
    else
	printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
    fi  
}


function clean_modules
{
    local rep="";
    local sudo_cmd="";
  
    for rep in  ${module_list[@]}; do
	if [[ $(checkIfDir "${rep}") -eq "$EXIST" ]]; then
	    sudo_cmd=$(check_sudo_permission_needed)
	    echo "Cleaning .... $rep"
	    pushd ${rep}
	    make uninstall 
	    popd
	    set -x;
	    ${sudo_cmd} rm -rf ${SC_TOP}/${rep} ||  die 1 "${FUNCNAME[*]} : one needs the sudo permission to do this. Pleases sudo rm -rf ${SC_TOP}/${rep}" ;
            set +x;

	else
	    printf " %20s: SKIP %20s, we cannot find it\n"  "${FUNCNAME[*]}"  "${rep}"
	fi
	printf "\n";
    done

}



function clone_all
{
    clone_base;
    clone_require;
    clone_modules;
}


function clean_all
{
    clean_modules;
    clean_require;
    clean_base;
}


function git_checkout_all
{
    local checkout_target=$1; shift;
    if [[ $(checkIfVar "${checkout_target}") -eq "$EXIST" ]]; then
	git_checkout_base    "${checkout_target}"
	git_checkout_require "${checkout_target}"
	git_checkout_modules "${checkout_target}"
    else
	printf " %20s: SKIP all checkout, we cannot find it\n"  "${FUNCNAME[*]}" 
    fi  
}



## Must be called in where ${TOP}/e3-*
## Assumption : To call this function is that it is OK to reset all in 
## Reset all local changes : git checkout --force
## arg 1 : module name
## arg 2 : version (hash, branch, ...)
function rebuild_module
{
    local module_name=$1;    shift;
    local module_version=$1; shift;
    local module_path_name="";
    
    if [[ $(checkIfVar "${module_name}") -eq "$NON_EXIST" ]]; then
	printf "Module name is mandatory\n";
	exit;
    else
	module_path_name=e3-${module_name};
    fi

    if [[ $(checkIfDir "${module_path_name}") -eq "$NON_EXIST" ]]; then
	printf "${module_path_name} doesn't exist, Cloning ....\n";
	git_clone ${module_path_name}
    fi
    
    pushd ${module_path_name};
    
    git fetch --all
    if [[ $(checkIfVar "${module_version}") -eq "$EXIST" ]]; then
	git checkout -f ${module_version} || die 1 "${FUNCNAME[*]} : there is no ${module_version} in ${module_name}. Please check it" ;
    fi
    make init    || die 1 "${FUNCNAME[*]} : make init in ${module_name} has error. Please check it" ;
    make patch   || die 1 "${FUNCNAME[*]} : make patch in ${module_name} has error. Please check it" ;
    make rebuild || die 1 "${FUNCNAME[*]} : cannot rebuild ${module_name}. Please check it" ;
    
    popd 
}
